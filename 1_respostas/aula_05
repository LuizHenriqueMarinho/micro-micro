Para as questões 2 a 5, considere que as variáveis f, g, h, i e j são do tipo inteiro (16 bits na arquitetura do MSP430), 
e que o vetor A[] é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores: 
f: R4 g: R5 h: R6 i: R7 j: R8 A: R9 Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

1- Escreva os trechos de código assembly do MSP430 para: 
(a) Somente setar o bit menos significativo de R5. 
bis.w #01,R5;

(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo. 
bis.w #0x03,R6; 

(c) Somente zerar o terceiro bit menos significativo de R7. 
and.w #0x0B,R7;

(d) Somente zerar o terceiro e o quarto bits menos significativo de R8. 
and.w #0x03,R8

(e) Somente inverter o bit mais significativo de R9.
xor.w #80,R9;

(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10. 
xor.w #F0, R10;
bis.w #0F,R10;

"Traduza" o seguinte trecho de código em C para o assembly do MSP430:

if(i>j) 
f = g+h+10; 
else 
f = g-h-10; 

comp R7,R8 // (I=R7)>(J=R8)=(R8-R7<0) N=1 
jn IF // Se o bit n for setado pula para a label[IF]
//else 
mov.w #10,R11 // R11=10 
sub.w R11,R6; // R6[H] = R6[H] - R11 
sub.w R6,R5; // R5[G] = R5[G] - R6[H] 
mov.w R4,R5; // R4[F]=R5[G] 
jmp FIM // Pular diretamente para o FIM

IF: 
mov.w #10,R4[F]; //R4[F]=10 
add.w R5[g],R4; // R4[F]=R4[F]+R5[G] 
add.w R6[h],R4; // R4[F]= R4[F]+R6[H] 
jmp FIM // Pular diretamente para o FIM

FIM:

"Traduza" o seguinte trecho de código em C para o assembly do MSP430: 
while(save[i]!=k) 
i++;

LOOP:R7,R12; // R7 = i , R12 é temporário
rla R12;
add.w R10,R12; //R10=save[], R12 = save + 2*i
comp 0(R12),R9;  //R9 = k, R12 =  save[i]
jeq FIM
inc.w R7;
jmp LOOP;
FIM:

"Traduza" o seguinte trecho de código em C para o assembly do MSP430: 
for(i=0; i<100; i++) 
A[i] = i*2;


"Traduza" o seguinte trecho de código em C para o assembly do MSP430: 
for(i=99; i>=0; i--) A[i] = i*2;
mov.w #100,R7;
FOR:comp #0,R7;
jeq FIM;
mov.w R7,R12; //R12 temporário
rla R12;  // 2*i
mov.w R12,R13 // R13 é o endereço de A
add.w R9,R13 ;   //R13 = ENDEREÇO DE A + R12
mov.w R12,0(R13);  //A[i] = 2*i
dec.w R7 ;       //i--
jmp FOR;
FIM:



